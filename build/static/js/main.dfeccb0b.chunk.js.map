{"version":3,"sources":["logo.jpg","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","props","console","log","question","className","answers","map","element","index","type","name","onChange","event","storeAnswers","content","App","questionAnswer","answer","answerSubmissions","state","push","setState","answerSubmssions","currentQuestion","this","getNextQuestion","fetch","method","headers","Accept","then","data","JSON","parse","length","src","logo","alt","getCurrentQuestionNumber","getTotalQuestions","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,6MCwB5BC,MArBf,SAAkBC,GAEjB,OADAC,QAAQC,IAAIF,EAAMG,UAEjB,oCACC,wBAAIC,UAAU,YAAYJ,EAAMG,SAASA,SAAzC,KAECH,EAAMG,SAASE,QAAQC,KAAI,SAACC,EAASC,GAAV,OAC3B,uBAAGJ,UAAU,gBACZ,2BACCK,KAAK,QACLL,UAAU,oBACVM,KAAK,aACLC,SAAU,SAACC,GAAD,OAAWZ,EAAMa,aAAaD,EAAOZ,EAAMG,SAAUK,MAE/DD,EAAQO,cC6JCC,E,kDApKd,WAAYf,GAAQ,IAAD,8BAClB,cAAMA,IAgDPa,aAAe,SAACD,EAAOT,EAAUK,GAChC,IACIQ,EAAiB,CACpBC,OAAQT,EACRL,SAAUA,GAGPe,EAAoB,EAAKC,MAAMD,kBACnCA,EAAkBE,KAAKJ,GACvB,EAAKK,SAAS,CACbC,iBAAkBJ,KAxDnB,EAAKC,MAAQ,CASZI,gBAAiB,KACjBL,kBAAmB,IAbF,E,gEAkBlBM,KAAKC,oB,wCAGa,IAAD,OACjBC,MAAM,qCAAsC,CAC3CC,OAAQ,OACRC,QAAS,CACRC,OAAQ,mBACR,eAAgB,sBAEfC,MAAK,SAACC,GACL9B,QAAQC,IAAI6B,GACf,EAAKV,SAAS,CACbE,gBAAiBS,KAAKC,MAAMF,U,0CAW9B,OAAO,K,iDAIP,OAAOP,KAAKL,MAAMD,kBAAkBgB,OAAS,I,+BAkG7C,OAAmC,OAA/BV,KAAKL,MAAMI,gBACP,8BAGP,yBAAKnB,UAAU,OACd,yBAAKA,UAAU,cACd,yBAAK+B,IAAKC,IAAMhC,UAAU,WAAWiC,IAAI,SACzC,6DACA,yCACab,KAAKc,2BADlB,OACkDd,KAAKe,oBAAqB,KAG5E,kBAAC,EAAD,CAAUpC,SAAUqB,KAAKL,MAAMI,gBAAiBV,aAAcW,KAAKX,qB,GA7JtD2B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.dfeccb0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.67bf5c4e.jpg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n\tconsole.log(props.question);\n\treturn (\n\t\t<>\n\t\t\t<h2 className=\"question\">{props.question.question} </h2>\n\n\t\t\t{props.question.answers.map((element, index) => (\n\t\t\t\t<p className=\"answerOption\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\tclassName=\"radioCustomButton\"\n\t\t\t\t\t\tname=\"radioGroup\"\n\t\t\t\t\t\tonChange={(event) => props.storeAnswers(event, props.question, index)}\n\t\t\t\t\t/>\n\t\t\t\t\t{element.content}\n\t\t\t\t</p>\n\t\t\t))}\n\t\t</>\n\t);\n}\n\nexport default Question;\n","import React, { Component } from 'react';\nimport logo from './logo.jpg';\nimport './App.css';\n//import Form from './components/Form.js'\n\n\nimport Result from './components/Result.js';\nimport Question from './components/Question';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\t//   counter: 0,\n\t\t\t//   questionId: 1,\n\t\t\t//   question: '',\n\t\t\t//   answerOptions: [],\n\t\t\t//   answer: '',\n\t\t\t//   answersCount: {},\n\t\t\t//   result: '',\n\t\t\t//   myAnswers: []\n\t\t\tcurrentQuestion: null,\n\t\t\tanswerSubmissions: [],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getNextQuestion();\n\t}\n\n\tgetNextQuestion() {\n\t\tfetch('http://localhost:3000/nextquestion', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t}).then((data) => {\n      console.log(data)\n\t\t\tthis.setState({\n\t\t\t\tcurrentQuestion: JSON.parse(data),\n\t\t\t});\n\t\t});\n\t}\n\n\tgetTotalQuestions() {\n\t\t// let alreadyAnswered = this.state.answerSubmissions.length;\n\t\t// let totalQs = quizQuestions.length + alreadyAnswered;\n\t\t// if (this.state.currentQuestion !== null) {\n\t\t// \ttotalQs += 1;\n\t\t// }\n\t\treturn 12;\n\t}\n\n\tgetCurrentQuestionNumber() {\n\t\treturn this.state.answerSubmissions.length + 1;\n\t}\n\n\tstoreAnswers = (event, question, index) => {\n\t\tlet answers = [];\n\t\tlet questionAnswer = {\n\t\t\tanswer: index,\n\t\t\tquestion: question,\n\t\t};\n\n\t\tlet answerSubmissions = this.state.answerSubmissions;\n\t\tanswerSubmissions.push(questionAnswer);\n\t\tthis.setState({\n\t\t\tanswerSubmssions: answerSubmissions,\n\t\t\n\t\t});\n\t};\n\n\t// setUserAnswer(answer) {\n\t//   this.setState((state) => ({\n\t//     answersCount: {\n\t//       ...state.answersCount,\n\t//       [answer]: (state.answersCount[answer] || 0) + 1\n\t//     },\n\t//     answer: answer\n\t//   }));\n\t// }\n\n\t// handleAnswerSelected = (questionId, event) => {\n\t//   console.log(event)\n\t//   console.log(questionId)\n\t//   this.setUserAnswer(event.target.value);\n\n\t//   if (this.state.questionId < quizQuestions.length) {\n\t//       setTimeout(() => this.setNextQuestion(), 500);\n\t//       let updatedAnswers = this.state.myAnswers.concat({questionId: questionId, answer: event.target.value})\n\t//       //this.setState is an async function so if I just set state the component will not be mounted yet\n\t//         this.setState((prevState) => ({\n\t//           myAnswers: updatedAnswers\n\t//         }));\n\t//       localStorage.setItem(\"myAnswers\", JSON.stringify(updatedAnswers))\n\t//       JSON.parse(localStorage.getItem('myAnswers'));\n\n\t//     } else {\n\t//       setTimeout(() => this.setResults(this.getResults()), 500);\n\t//     }\n\n\t// }\n\n\t// setNextQuestion() {\n\t//   const counter = this.state.counter + 1;\n\t//   const questionId = this.state.questionId + 1;\n\t//   this.setState({\n\t//     counter: counter,\n\t//     questionId: questionId,\n\t//     question: quizQuestions[counter].question,\n\t//     answerOptions: quizQuestions[counter].answers,\n\t//     answer: '',\n\t//     index: quizQuestions[counter].index\n\t//   });\n\t// }\n\n\t// getResults() {\n\t//   const answersCount = this.state.answersCount;\n\t//   const answersCountKeys = Object.keys(answersCount);\n\t//   const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n\t//   const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n\t//   return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\n\t// }\n\n\t// setResults (result) {\n\t//   if (result.length === 1) {\n\t//     this.setState({ result: result[0] });\n\t//   } else {\n\t//     this.setState({ result: 'Undetermined' });\n\t//   }\n\t// }\n\n\t// renderResult() {\n\t//   return (\n\t//     <Result quizResult={this.state.result} />\n\t//   );\n\t// }\n\t// renderQuiz() {\n\t//   return (\n\t//     <Quiz\n\t//       answer={this.state.answer}\n\t//       answerOptions={this.state.answerOptions}\n\t//       questionId={this.state.index}\n\t//       question={this.state.question}\n\t//       questionTotal={quizQuestions.length}\n\t//       onAnswerSelected={this.handleAnswerSelected}\n\t//     />\n\t//   );\n\t// }\n\n\trender() {\n\t\tif (this.state.currentQuestion === null) {\n\t\t\treturn <div></div>;\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<h1>So you think you know Gaming?</h1>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tYou are on {this.getCurrentQuestionNumber()} of {this.getTotalQuestions()}{' '}\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<Question question={this.state.currentQuestion} storeAnswers={this.storeAnswers} />\n\t\t\t\t</div>\n\t\t\t\t{/* {this.state.result ? this.renderResult() : this.renderQuiz()} */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}